name: 'Convert terminal sessions to SVG'
author: 'Björn Kahlert'
description: 'Record ● rec files as terminal sessions and convert them to SVG'
branding:
  icon: 'circle'
  color: 'red'
inputs:
  build-dir:
    description: 'Relative path under $GITHUB_WORKSPACE to store (intermediate) build artifacts'
    required: false
    default: build/rec/
  out-dir:
    description: 'Relative path under $GITHUB_WORKSPACE to copy the created SVG files to'
    required: false
    default: docs/
  term:
    description: 'Value to use for the TERM environmental variable'
    required: false
    default: xterm-256color
  indicator:
    description: 'Name of the environmental variable set during recording'
    required: false
    default: RECORDING
  columns:
    description: 'Number of columns to use for recording and conversion'
    required: false
    default: '132'
  rows:
    description: 'Number of rows to use for recording and conversion'
    required: false
    default: '25'
  restart-delay:
    description: 'Number of seconds until the animation restart'
    required: false
    default: '5'
  term-profile:
    description: 'Relative path under $GITHUB_WORKSPACE to to the terminal profile to use for conversion; [supported profiles](https://github.com/marionebl/term-schemesupported-formats)'
    required: false
    default: auto
  parallel:
    description: 'Maximum number of conversions that run at once; 0 will run as many conversions as possible'
    required: false
    default: auto
  delete-build:
    description: 'Whether to hide the recording process'
    required: false
    default: 'false'
  hide-recording:
    description: 'Whether to delete intermediary build files on completion'
    required: false
    default: 'false'
  files:
    description: >
      Relative paths under $GITHUB_WORKSPACE the rec files to be converted are located.
      - To convert a single file, specify the file's path (e.g. `rec/foo.rec`).
      - To convert a file tree, specify the directory's path (e.g. `rec`).
        - To convert filter certain files, specify the directory's path (e.g. `rec`) and
          on separate lines the relative paths of the files to convert (e.g. `foo.rec`).
    required: false
    default: rec/
  separator:
    description: 'Separator to use for `output.files`'
    required: false
    default: ', '
  ref:
    description: >
      The branch, tag or SHA to use for links included in the generated Markdown
    required: true
    default: auto
outputs:
  status:
    description: 'Exit status/code of the conversion'
    value: ${{ steps.recordr.outputs.status }}
  files:
    description: 'Newline-separated list of the created SVG files'
    value: ${{ steps.recordr.outputs.files }}
  file-list:
    description: '`inputs.separator`-separated list of the created SVG files'
    value: ${{ steps.recordr.outputs.file-list }}
  markdown:
    description: 'Markdown with previews and links to the generated SVG files'
    value: ${{ steps.recordr.outputs.markdown }}
runs:
  using: 'composite'
  steps:
    - name: Convert terminal sessions to SVG
      id: recordr
      env:
        DOCKER_IMAGE_TAG: edge
      run: |
        declare -a input_files=()
        while read -r input_file; do
          [ ! "${input_file-}" ] || input_files+=("$input_file")
        done <<INPUT_FILES
        ${{ inputs.files }}
        INPUT_FILES

        declare output_files
        output_files=$(
          ./recordrw \
            --build-dir=${{ inputs.build-dir }} \
            --out-dir=${{ inputs.out-dir }} \
            --term=${{ inputs.term }} \
            --indicator=${{ inputs.indicator }} \
            --columns=${{ inputs.columns }} \
            --rows=${{ inputs.rows }} \
            --restart-delay=${{ inputs.restart-delay }} \
            --term-profile=${{ inputs.term-profile }} \
            --parallel=${{ inputs.parallel }} \
            --delete-build=${{ inputs.delete-build }} \
            --hide-recording=${{ inputs.hide-recording }} \
            "${input_files[@]}"
        )
        echo ::set-output name=status::"$?"
        echo ::set-output name=files::"${output_files-}"

        declare output_file_list=''
        while read -r output_file; do
          [ "${output_file-}" ] || continue
          [ ! "${output_file_list-}" ] || output_file_list+="${{ inputs.separator }}"
          output_file_list+="$output_file"
        done <<<"${output_files-}"
        echo ::set-output name=file-list::"$output_file_list"

        declare markdown=''
        while read -r output_file; do
          [ "${output_file-}" ] || continue
          [ ! "${markdown-}" ] || markdown+="<br>"

          declare ref=${{ inputs.ref }}
          [ ! "${ref-}" = auto ] || {
            ref=${{ github.ref }}
            ref="${ref#*/*/}--recordr"
          }

          declare output_filename=${output_file##*/}
          declare output_basename=${output_filename%.*}
          [ ! "${ref-}" = auto ] || {
            ref=${{ github.ref }}
            ref="${ref#*/*/}--recordr"
          }

          declare -a output_words=() output_Words=()
          [ ! "${output_basename-}" ] || IFS=' _-' read -r -a output_words <<<"$output_basename"
          for output_word in "${output_words[@]}"; do
            output_Words+=("${output_word^}")
          done
          declare output_title=${output_Words[*]}

          markdown+=$(cat <<MARKDOWN
        <details>
        <summary>$output_file</summary>
        <h3>Preview</h3>

        [![description of the contents of $output_basename](../raw/$ref/$output_file "Title of $output_title")
        *Title of $output_title*](../raw/$ref/$output_file)

        <h3>Markdown ${{ github.ref }}--recordr</h3>

        \`\`\`markdown
        [![description of the contents of $output_basename]($output_file "Title of $output_title")
        *Title of $output_title*](../../raw/master/$output_file)
        \`\`\`

        </details>
        MARKDOWN
        )
        done <<<"${output_files-}"
        echo ::set-output name=markdown::"$markdown"
      shell: bash
